1.线性结构
            1.数据逻辑具有连续性；物理储存上也有连续性         顺序表
            2.数据逻辑具有连续性；物理储存上也不一定连续       链表
2.树形结构
3.图形结构
4.排序

顺序表
  创建/消除
  增/删/查/改
  访问第n个元素的时候，时间复杂度要求O(1)
  创建/销毁
  增       头插/尾插/插入(给定下标)
  删       头删/尾删/删除(给定下标)
  查       indexOf(element)
  改       set(int index,int value);
  防问     get(int index);
  
  main(){
       SeqList sl = new SeqList();
       }
       
 尾插        size = 3
 a   b   c   
 0   1   2   3
 尾插        size = 3
 a   b   c   
 0   1   2   3   4
     size = 4
 z   a   b   c
 0   1   2   3   4
 1.需要从后往前遍历，否则数据会被覆盖
 2.红色：数据下标，a原来所在的下标
   蓝色：空间下标，a被搬到所在的下标
 3.数据下标遍历的范围[size - 1，0]
   空间下标便利的范围[size,1]
 4.搬移的过程     array[空间] = array[数据]
 5.空间的下标 = 数据的下标
 public void pushFront(int element){
 //TODO:先不考虑array放不下的情况
 //i是数据下标，遍历范围是[size - 1，0]
 for(int i = size - 1,i >= 0; i--){
        array[i+1] = array[i]; 
 }
 //[0]空出来了
 array[0] = element;
 size++;
 }
 //中间插入，根据下标做插入
 public void insert(int index,int element){
 }
 
 扩容
 1.扩容的条件
   在插入之前 size == array.length;
 2.如何让扩容
 3.哪些方法需要考虑扩容   所有插入
 属性的初始化
   普通属性:1.定义时的初始化2.构造方法中初始化3.构造代码块初始化
   构造每一个对象时
   静态属性：1.定义时初始化2.静态代码块初始化
   类的加载时
 
 
 
 
