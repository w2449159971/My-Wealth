一个java文件只能有一个public的类，而这个类的名称和文件名一样，其他类无所谓

没有明确的理由的情况下，统统使用private

1.顶级使用场景下       修饰外部类
          public/不写 （包私有）
2.成员级别     修饰属性、方法、内部类
         public/protect/不写（包私有）


重要：内存模型的理解
      1.把java的内存分成三个区域                     栈、堆、方法区
               或者简单的看成两个区域                  栈、堆（方法区）
      2.局部变量、形参  在栈区
            生命周期（空间的有效期）是伴随方式的执行结束而消亡
       3.方法区
               类的信息、方法的代码
       4.堆区
             对象（属性）
class A{
    int age；
}
public class Course{
        main()   {
             A a1 = new A();
             A a2 = new A();
          }
}
        5.当对象没有引用指向它时，这个对象被视为垃圾对象，随后会被垃圾回收器回收
                        GC （Garbage Collector）
                        GC 做的再好，也是有性能损耗的，所以注意不要过多产生无用的对象
         6.调用对象的方法，可以想象成
                 object.method();            method(object);
                  调用方法时，想象会传入一个对象作为隐式的参数
            7.创建对象的过程
                       a)创建一个引用变量
                       b)计算对象所需内存的大小
                                从JVM申请内存（空间），数据未初始化
                        c)构造方法负责将申请出的内存空间初始化
---局部变量、形参或者其他，与属性、方法或者其他重名
      导致直接通过名字访问出现歧义  命名遮挡

---关键字this
       1.通过this全名称访问属性、方法
       2.通过this调用其它的构造方法
        3.？
        4.

---static关键字的用法
           1.修饰属性     静态属性 / 类变量
           2.修饰方法     静态方法
           3.修饰内部类
           4.静态代码块
            5.improt static 包；

最核心的一点就是static和对象进行解绑
  静态属性                    vs                 属性       
  存放在方法区                                 存放在对象（堆）
 [访问限定符]static 数据类型 静态属性名称；

如何访问静态属性
       1.在类内部，以名称直接访问
        2.在类外部，Person.createdCount
        3.       object.createdCount 不建议
--静态方法
     语法：[访问限定符]static返回值 方法名 （参数列表）...
      public static void main(String[] args){}
 静态方法         vs        方法
没有这个隐式对象         隐式的传入一个对象作为参数
因为没有对象(隐式)
1.this关键字不能用
2.对象的普通属性不能访问
3.无法调用普通方法
----调用静态方法
1.内部  直接调用
2.外部/内部 类名称.方法（）...   //推荐
3..外部/内部 对象名称.方法（）；  //不推荐
----静态方法里只能调用静态方法
